1.String占位符替换:
	String a = "您的账号{0}还剩{1}元";
    String b = MessageFormat.format(a,"131","20");
    System.out.println(b);
		
6.【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。
	Object object =  null;
	正例： "test".equals(object);//false
	反例： object.equals("test");//空指针
	说明：推荐使用 java.util.Objects#equals （JDK7 引入的工具类）
7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。
	说明：对于 Integer var=?在-128 至 127 之间的赋值，Integer 对象是在 IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。
	如：
	Integer t1 = 128;
    Integer t2 = 128;
    System.out.println(t1 == t2);//false
	
1.Mybatis批量更新: *.properties文件的url里加上allowMultiQueries=true
2.块状元素添加contenteditable=true,可以实现textarea高度自适应效果,如:<div class="test_box" contenteditable="true" style="border: 1px #8BC34A solid;width: 240px;"><br /></div> 
3.springMVC上传文件: @RequestParam("files") MultipartFile files[]【数组】
4.注意日志用占位符: logger.info("请求路径:{}",url);
5.String json = IOUtils.toString(req.getInputStream(),"utf-8"); 【IOUtils】
6.StringUtils:
	list转成分隔符字符串:
	List<String> channels= UserUtils.getManagerChannels();
    String orgCd = tbAmsBizAssetInfo.getOrgCd();
    if (StringUtils.isBlank(orgCd)){
        orgCd = StringUtils.join(channels,"','");
	}

7.org.slf4j.MDC 可向日志添加内容。最后使用完之后,使用 MDC.clear()来清除里面的值。
	如：在日志中打印客户信息: 
	示例：
	public class AuthInterceptor implements org.springframework.web.servlet.HandlerInterceptor{
		@Override
		public boolean preHandle(HttpServletRequest request,HttpServletResponse response, Object handler) throws Exception {
			//判断session是否超时
			if(obj==null){
				String path = request.getContextPath() + "/sessionTimeout?timeout=true";
				response.sendRedirect(path);
				return false;
			}else if(!PubMethod.isEmpty(currentRoleIds)) {//currentRoleIds:session里面的值
				MDC.put("userName", adminInfo.get(Sessions.USERINFO_DISPLAYNAME) == null ? "" : adminInfo.get(Sessions.USERINFO_DISPLAYNAME).toString());
			}
		@Override
		public void postHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			MDC.clear();
		}
	}
	
	logback配置中可以用 %X{userName}来打印。
	附加：
		%d 代表时间2006-10-20 14:06:49,812 
	    %t 输出产生记录事件的线程名。
	    X{key} 输出与产生记录事件的线程相关联的MDC。
	    %p 输出记录事件的级别。
	    %c 输出源记录事件的logger名。
        %F 输出执行记录请求的Java源文件的文件名。
        %L 输出执行记录请求的行号。
        %M 输出执行记录请求的方法名。
        %m 输出与记录事件相关联的应用程序提供的消息。
        %n 输出与平台相关的行分隔符。	
	